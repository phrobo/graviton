#ifndef __GRAVITON_CLIENT_H__
#define __GRAVITON_CLIENT_H__

#include <glib.h>
#include <glib-object.h>
#include <graviton/node.h>
#include <graviton/discovery-method.h>

G_BEGIN_DECLS

#define GRAVITON_CLIENT_TYPE            (graviton_client_get_type ())
#define GRAVITON_CLIENT(obj)            (G_TYPE_CHECK_INSTANCE_CAST ((obj), GRAVITON_CLIENT_TYPE, GravitonClient))
#define GRAVITON_CLIENT_CLASS(klass)    (G_TYPE_CHECK_CLASS_CAST ((klass), GRAVITON_CLIENT_TYPE, GravitonClientClass))
#define IS_GRAVITON_CLIENT(obj)         (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GRAVITON_CLIENT_TYPE))
#define IS_GRAVITON_CLIENT_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GRAVITON_CLIENT_TYPE))
#define GRAVITON_CLIENT_GET_CLASS(obj)  (G_TYPE_INSTANCE_GET_CLASS ((obj), GRAVITON_CLIENT_TYPE, GravitonClientClass))

//TODO: Rename to GravitonCloud
typedef struct _GravitonClient      GravitonClient;
typedef struct _GravitonClientClass GravitonClientClass;
typedef struct _GravitonClientPrivate GravitonClientPrivate;

struct _GravitonClientClass
{
  GObjectClass parent_class;
};

/**
 * GravitonClient: An interface to a given Graviton cloud
 * 
 * A GravitonClient provides a unified view of a Graviton cloud, which is a
 * collection of #GravitonNode.
 *
 * Cloud membership is determined by comparing the locally stored public key
 * with a challenge generated by a remote #GravitonNode's private key.
 *
 * Clouds can provide a number of different ways to enumerate their members:
 *
 * * The graviton.cloud graviton service
 * * Configuration of 
 *
 */
struct _GravitonClient
{
  GObject parent;

  /*< private >*/
  GravitonClientPrivate *priv;
};

GType graviton_client_get_type (void);

GravitonClient *graviton_client_new (const gchar *cloud_id);
GravitonClient *graviton_client_new_default_cloud ();

GList *graviton_client_get_found_nodes (GravitonClient *client);

void graviton_client_add_discovery_method (GravitonClient *client, GravitonDiscoveryMethod *method);

void graviton_client_load_discovery_plugins (GravitonClient *client);

GArray *graviton_client_find_discovery_plugins (GravitonClient *client);

GravitonNode *graviton_client_find_node_sync (GravitonClient *client, const gchar *guid, GError **error);
GList *graviton_client_find_service_sync (GravitonClient *client, const gchar *serviceName, GError **error);

const gchar *graviton_client_get_cloud_id (GravitonClient *client);
const gchar *graviton_client_get_cloud_name (GravitonClient *client);

G_END_DECLS

#endif
