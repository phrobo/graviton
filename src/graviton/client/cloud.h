#ifndef __GRAVITON_CLOUD_H__
#define __GRAVITON_CLOUD_H__

#include <glib.h>
#include <glib-object.h>
#include "node.h"
#include "node-browser.h"

G_BEGIN_DECLS

#define GRAVITON_CLOUD_TYPE            (graviton_cloud_get_type ())
#define GRAVITON_CLOUD(obj)            (G_TYPE_CHECK_INSTANCE_CAST ((obj), GRAVITON_CLOUD_TYPE, GravitonCloud))
#define GRAVITON_CLOUD_CLASS(klass)    (G_TYPE_CHECK_CLASS_CAST ((klass), GRAVITON_CLOUD_TYPE, GravitonCloudClass))
#define IS_GRAVITON_CLOUD(obj)         (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GRAVITON_CLOUD_TYPE))
#define IS_GRAVITON_CLOUD_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GRAVITON_CLOUD_TYPE))
#define GRAVITON_CLOUD_GET_CLASS(obj)  (G_TYPE_INSTANCE_GET_CLASS ((obj), GRAVITON_CLOUD_TYPE, GravitonCloudClass))

typedef struct _GravitonCloud      GravitonCloud;
typedef struct _GravitonCloudClass GravitonCloudClass;
typedef struct _GravitonCloudPrivate GravitonCloudPrivate;

struct _GravitonCloudClass
{
  GObjectClass parent_class;
};

/**
 * GravitonCloud: An interface to a given Graviton cloud
 * 
 * A GravitonCloud provides a unified view of a Graviton cloud, which is a
 * collection of #GravitonNode.
 *
 * Cloud membership is determined by comparing the locally stored public key
 * with a challenge generated by a remote #GravitonNode's private key.
 *
 * Clouds can provide a number of different ways to enumerate their members:
 *
 * * The graviton.cloud graviton service
 * * Configuration of 
 *
 */
struct _GravitonCloud
{
  GObject parent;

  /*< private >*/
  GravitonCloudPrivate *priv;
};

typedef enum {
  GRAVITON_SERVICE_NEW,
  GRAVITON_SERVICE_ALL_FOR_NOW,
  GRAVITON_SERVICE_LOST
} GravitonServiceEvent;

typedef void (*GravitonServiceBrowseCallback)(GravitonCloud *cloud, GravitonServiceEvent event, GravitonServiceInterface *iface, gpointer user_data);

GType graviton_cloud_get_type (void);

GravitonCloud *graviton_cloud_new (const gchar *cloud_id, GravitonNodeBrowser *browser);
GravitonCloud *graviton_cloud_new_default_cloud ();

GList *graviton_cloud_get_found_nodes (GravitonCloud *client);

GravitonNode *graviton_cloud_find_node (GravitonCloud *client, const gchar *guid, GError **error);
void graviton_cloud_find_service_interfaces (GravitonCloud *client, const gchar *serviceName, GravitonServiceBrowseCallback callback, gpointer user_data);

const gchar *graviton_cloud_get_cloud_id (GravitonCloud *client);
const gchar *graviton_cloud_get_cloud_name (GravitonCloud *client);

G_END_DECLS

#endif
